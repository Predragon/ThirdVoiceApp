"""
Third Voice - Custom Model Version
Using only your selected AI models
"""

import streamlit as st
import requests
from streamlit.components.v1 import html
import time

# ===== Configuration =====
API_URL = "https://openrouter.ai/api/v1/chat/completions"
API_KEY = st.secrets.get("OPENROUTER_API_KEY")

# Your selected models (in priority order)
MODELS = [
    "google/gemma-2-9b-it:free",
    "meta-llama/llama-3.2-3b-instruct:free", 
    "microsoft/phi-3-mini-128k-instruct:free"
]

CONTEXTS = {
    "general": {
        "color": "#5D9BFF",
        "icon": "üíô",
        "prompt": "Improve this message for clarity and kindness:"
    },
    "romantic": {
        "color": "#FF7EB9",
        "icon": "‚ù§Ô∏è",
        "prompt": "Make this romantic message more loving:"
    },
    "workplace": {
        "color": "#6EE7B7",
        "icon": "üíº",
        "prompt": "Rephrase this message professionally:"
    }
}

# ===== Initialize Session State =====
if 'analyze_clicked' not in st.session_state:
    st.session_state.analyze_clicked = False
if 'coach_clicked' not in st.session_state:
    st.session_state.coach_clicked = False
if 'last_model' not in st.session_state:
    st.session_state.last_model = MODELS[0]

# ===== Mobile UI Setup =====
st.set_page_config(layout="centered")

def apply_styles():
    st.markdown(f"""
    <style>
    /* Mobile-optimized styles */
    @media (max-width: 768px) {{
        div.stTextArea > textarea {{
            font-size: 18px !important;
            min-height: 150px !important;
        }}
        div.stButton > button {{
            width: 100%;
            padding: 14px !important;
        }}
    }}
    .copy-box {{
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 12px;
        margin: 10px 0;
        background: #f8f9fa;
    }}
    .model-badge {{
        font-size: 0.8em;
        color: #666;
        font-style: italic;
    }}
    </style>
    """, unsafe_allow_html=True)

# ===== AI Service =====
def get_ai_response(message, context_type, action):
    """Try your selected models in order"""
    for model in MODELS:
        try:
            response = requests.post(
                API_URL,
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "HTTP-Referer": "https://third-voice.streamlit.app"
                },
                json={
                    "model": model,
                    "messages": [{
                        "role": "system",
                        "content": CONTEXTS[context_type]["prompt"]
                    },{
                        "role": "user",
                        "content": message
                    }],
                    "temperature": 0.7,
                    "max_tokens": 600
                },
                timeout=25
            )
            response.raise_for_status()
            st.session_state.last_model = model
            return response.json()["choices"][0]["message"]["content"]
        except:
            continue
    return None

# ===== App Interface =====
apply_styles()

# 1. Relationship Selector
context = st.selectbox(
    "Select relationship:",
    options=list(CONTEXTS.keys()),
    format_func=lambda x: f"{CONTEXTS[x]['icon']} {x.capitalize()}"
)

# 2. Message Input
user_input = st.text_area(
    "Your message:",
    placeholder="Type or paste here...",
    height=150
)

# 3. Action Buttons
col1, col2 = st.columns(2)
with col1:
    analyze_btn = st.button("üîç Analyze", use_container_width=True)
with col2:
    coach_btn = st.button("‚ú® Improve", type="primary", use_container_width=True)

# Handle button clicks
if analyze_btn:
    st.session_state.analyze_clicked = True
    st.session_state.coach_clicked = False
elif coach_btn:
    st.session_state.coach_clicked = True
    st.session_state.analyze_clicked = False

# 4. Results Handling
if st.session_state.analyze_clicked or st.session_state.coach_clicked:
    if not user_input.strip():
        st.warning("Please enter a message")
    else:
        with st.spinner("Thinking..."):
            action = "analyze" if st.session_state.analyze_clicked else "coach"
            result = get_ai_response(user_input, context, action)
            
            if result:
                # Display Results
                st.markdown(f"""
                <div style="border-left: 4px solid {CONTEXTS[context]['color']}; 
                            padding: 1rem; margin: 1rem 0; border-radius: 0 8px 8px 0">
                    <strong>{'üîç Analysis' if st.session_state.analyze_clicked else '‚ú® Improved Message'}:</strong><br>
                    {result}
                </div>
                """, unsafe_allow_html=True)
                
                # Show model used
                model_name = st.session_state.last_model.split('/')[-1].replace(':free','')
                st.markdown(f'<div class="model-badge">Generated by: {model_name}</div>', unsafe_allow_html=True)
                
                # Copy Section
                st.text_area("Copy this text:", 
                            value=result, 
                            height=200,
                            key="copy_area")
                st.write("Press and hold to select text")
                
                if st.button("üîÑ Try Another", use_container_width=True):
                    st.session_state.analyze_clicked = False
                    st.session_state.coach_clicked = False
                    st.rerun()
            else:
                st.error("All models failed - try again later")
                if st.button("üîÑ Retry", use_container_width=True):
                    st.rerun()
